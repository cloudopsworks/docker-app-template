##
# (c) 2022 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      isRelease:
        required: true
        type: boolean
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string

    secrets:
      BOT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

    outputs:
      has_preview:
        description: "Has Preview output"
        value: ${{ jobs.build.outputs.has_preview }}
      pipeline_helm:
        description: "Pipeline with Helm Enabled"
        value: ${{ jobs.build.outputs.pipeline_helm }}
      pipeline_docker:
        description: "Pipeline with Docker Enabled"
        value: ${{ jobs.build.outputs.pipeline_docker }}
      pipeline_sonarqube:
        description: "Pipeline with Sonarqube Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_sonarqube }}
      pipeline_dtrack:
        description: "Pipeline with DependencyTrack Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack }}
      pipeline_dtrack_project_type:
        description: "Pipeline classification for DependencyTrack Analysis, blank when dtrack is disabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack_project_type }}
      semver:
        description: "Semver Output calculated on Build"
        value: ${{ jobs.build.outputs.semver }}
      package_name:
        description: "Package Name Output calculated on Build"
        value: ${{ jobs.build.outputs.package_name }}

jobs:
  build:
    outputs:
      has_preview: ${{ steps.has_preview.outputs.result == 1 }}
      pipeline_helm: ${{ steps.pipeline_helm.outputs.result == 1 }}
      pipeline_docker: ${{ steps.pipeline_docker.outputs.result == 1 }}
      pipeline_sonarqube: ${{ steps.disable_sonarqube.outputs.result == 0 }}
      pipeline_dtrack: ${{ steps.disable_dtrack.outputs.result == 0 }}
      pipeline_dtrack_project_type: ${{ steps.dtrack_project_type.outputs.type }}
      semver: ${{ steps.semver.outputs.version }}
      package_name: ${{ steps.package_name.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Get pipeline conf node version
      - name: Get pipeline node version
        id: node_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.version // "18"' ./cloudopsworks-ci.yaml
      # Get pipeline conf node dist
      - name: Get pipeline node dist
        id: node_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.dist // "adopt"' ./cloudopsworks-ci.yaml
      # Setup Node JS for builds with version provided
      - name: Set Node Version
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.node_version.outputs.result }}"
          check-latest: true
          token: ${{ secrets.BOT_TOKEN }}
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v3
        with:
          version: 'latest'
          token: ${{ secrets.BOT_TOKEN }}
      # Cache all NPM packages
      - name: Cache NPM packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./cloudopsworks-ci.yaml | grep docker | wc -l | tr -d " "


      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Versioning SET
      - name: Version SET
        run: make version

      - name: Version Capture
        id: semver
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      #
      # Docker Build login Azure
      - name: Docker Login Azure
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ steps.pipeline_docker.outputs.result == 1 && env.TARGET == 'AZ' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      #
      # Docker Build login AWS
      - name: Configure AWS Credentials
        if: ${{ steps.pipeline_docker.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Docker Login AWS
        if: ${{ steps.pipeline_docker.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
      #
      # Build-X run
      - name: Set up Docker Buildx
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/setup-buildx-action@v2
      # Push docker version latest release
      - name: Docker Push Release
        if: steps.pipeline_docker.outputs.result == 1 && inputs.isRelease
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.semver.outputs.version }}
      # Push docker version but is not latest release
      - name: Docker Push Non-Release
        if: steps.pipeline_docker.outputs.result == 1 && ! inputs.isRelease
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.semver.outputs.version }}
